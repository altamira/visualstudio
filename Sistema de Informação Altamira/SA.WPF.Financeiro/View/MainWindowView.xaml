<RibbonWindow x:Class="SA.WPF.Financial.View.MainWindowView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:sysglb="clr-namespace:System.Globalization;assembly=mscorlib"   
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:model="clr-namespace:SA.WPF.Financial.Model" 
        xmlns:viewmodel="clr-namespace:SA.WPF.Financial.ViewModel"
        xmlns:converter="clr-namespace:SA.WPF.Financial.Converter"
        xmlns:enum="clr-namespace:SA.WPF.Financial.Enum"
        xmlns:behavior="clr-namespace:SA.WPF.Financial.Behavior"
        xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF45"
        xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
        DataContext="{Binding Transaction, Source={StaticResource Locator}}"
        Title="Altamira - Departamento Financial" WindowState="Maximized" >

    <!--<RibbonWindow.DataContext>
        <viewmodel:TransactionViewModel />
    </RibbonWindow.DataContext>-->

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing" >
            <command:EventToCommand Command="{Binding CloseCommand}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <i:Interaction.Behaviors>
        <behavior:DialogBehavior Caption="Incluir..." Text="Ocorreu um erro ao gravar os dados. O Transaction não foi incluido." Buttons="OK" Identifier="OnAddErrorMessageBox" />
        <behavior:DialogBehavior Caption="Gravar..." Text="Os dados foram gravados com sucesso !" Buttons="OK" Identifier="OnSaveSucessMessageBox" />
        <behavior:DialogBehavior Caption="Gravar..." Text="Ocorreu um erro ao gravar os dados. As alterações não foram salvas." Buttons="OK" Identifier="OnSaveErrorMessageBox" />
        <behavior:DialogBehavior Caption="Excluir..." Text="Confirma a exclusão do Transaction selecionado ?" Buttons="YesNo"  Identifier="OnDeleteConfirmMessageBox" />
        <!--<behavior:DialogBehavior Caption="Excluir..." Text="O Transaction foi excluido com sucesso." Buttons="OK" Identifier="OnDeleteSucessMessageBox" />-->
        <behavior:DialogBehavior Caption="Excluir..." Text="Ocorreu um erro e o Transaction não foi excluido." Buttons="OK" Identifier="OnDeleteErrorMessageBox" />
        <behavior:DialogBehavior Caption="Filtrar..." Text="Selecione a Account para filtrar os registros." Buttons="OK" Identifier="OnFilterMessageBox" />
        <behavior:DialogBehavior Caption="Fechar..." Text="Existem alteração que não foram gravadas, deseja gravar antes de fechar ?" Buttons="YesNoCancel" Identifier="OnCloseMessageBox" />
    </i:Interaction.Behaviors>

    <RibbonWindow.Resources>

        <Style x:Key="SingleClick" TargetType="{x:Type DataGridCell}">
            <!--<EventSetter Event="PreviewMouseLeftButtonDown" Handler="DataGridCell_PreviewMouseLeftButtonDown"></EventSetter>-->
        </Style>

        <converter:TransactionTypeToColorConverter x:Key="TransactionTypeToColorConverter"/>
        <converter:DecimalSignToColorConverter x:Key="DecimalSignToColorConverter" />
        <converter:EnumToBoolConverter x:Key="EnumToBoolConverter"/>
        <converter:IgnoreNewItemPlaceHolderConverter x:Key="IgnoreNewItemPlaceHolderConverter"/>

        <!-- DataGrid Background -->
        <LinearGradientBrush x:Key="BlueLightGradientBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#FFEAF3FF"/>
            <GradientStop Offset="0.654" Color="#FFC0DEFF"/>
            <GradientStop Offset="1" Color="#FFC0D9FB"/>
        </LinearGradientBrush>

        <!-- DatGrid style -->
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="Margin" Value="5" />
            <Setter Property="Background" Value="{StaticResource BlueLightGradientBrush}" />
            <Setter Property="BorderBrush" Value="#FFA6CCF2" />
            <Setter Property="RowBackground" Value="White" />
            <Setter Property="AlternatingRowBackground" Value="#FDFFD0" />
            <Setter Property="HorizontalGridLinesBrush" Value="Transparent" />
            <Setter Property="VerticalGridLinesBrush" Value="#FFD3D0" />
            <Setter Property="RowHeaderWidth" Value="0" />
        </Style>

        <DataTemplate x:Key="DateTimeField">
            <xcdg:DataGridDatePicker SelectedDate="{Binding Data}" />
        </DataTemplate>

    </RibbonWindow.Resources>

    <Grid >

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Ribbon x:Name="RibbonMain" >

            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu Visibility="Collapsed" />
            </Ribbon.ApplicationMenu>

            <RibbonTab Header="Transaction">
                <RibbonGroup Header="Movimentação">

                    <RibbonButton x:Name="btnIncluir" 
            			LargeImageSource="\Images\Actions-document-new_6_32x32x32.png"
            			Label="Incluir"
            			Command="{Binding AddCommand}" />

                    <RibbonButton x:Name="btnAlterar" 
            			LargeImageSource="\Images\Action-edit_6_32x32x32.png"
            			Label="Alterar"
            			Command="{Binding EditCommand}" IsEnabled="{Binding CanEdit}" />

                    <RibbonButton x:Name="btnGravar" 
            			LargeImageSource="\Images\Select_2_32x32x32.png"
            			Label="Gravar"
            			Command="{Binding SaveCommand}" IsEnabled="{Binding CanSave}" />

                    <RibbonButton x:Name="btnExcluir" 
            			LargeImageSource="\Images\Action-cancel_6_32x32x32.png"
            			Label="Excluir"
            			Command="{Binding DeleteCommand}" IsEnabled="{Binding CanDelete}" />

                </RibbonGroup>

                <RibbonGroup Header="Account" >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <!--<ColumnDefinition Width="*"></ColumnDefinition>-->
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0" >
                            <Label Content="Bank" />
                            <ComboBox Width="200" Margin="5,0,5,0" 
                                      ItemsSource="{Binding Bank}" 
                                      DisplayMemberPath="Name" 
                                      SelectedValuePath="Id" 
                                      SelectedItem="{Binding BankSelectedItem}" />
                        </StackPanel>

                        <StackPanel Grid.Column="1" >
                            <Label Content="Agency" />
                            <ComboBox x:Name="AgencyComboBox" Width="100" Margin="5,0,5,0" 
                                      ItemsSource="{Binding BankSelectedItem.Agencies}" 
                                      DisplayMemberPath="Number" 
                                      IsSynchronizedWithCurrentItem="True" 
                                      SelectedItem="{Binding AgencySelectedItem}"/>
                        </StackPanel>

                        <StackPanel Grid.Column="2">
                            <Label Content="Account"/>
                            <ComboBox x:Name="AccountComboBox" Width="100" Margin="5,0,5,0" 
                                      ItemsSource="{Binding AgencySelectedItem.Accounts}" 
                                      DisplayMemberPath="Number" 
                                      SelectedValuePath="Id" 
                                      SelectedItem="{Binding Path=AccountSelectedItem}"
                                      IsSynchronizedWithCurrentItem="True" />
                            <!--SelectedItem="{Binding Account}"-->
                            <!--SelectedValue="{Binding Source={StaticResource TransactionViewSource}, Path= Account}"-->

                        </StackPanel>

                        <!--<RibbonButton Grid.Column="3" Label="Filtrar" LargeImageSource="\Images\analysis_5_32x32x32.png" Click="Filtrar_Click" />-->

                    </Grid>

                </RibbonGroup>
                <RibbonGroup Header="Filtros">
                    <Grid x:Name="gridFiltros">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <StackPanel Orientation="Horizontal" >
                            <RadioButton GroupName="liquidatedGroupName" Content="Não liquidateds" IsChecked="{Binding Liquidated, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=true, ValidatesOnExceptions=true, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static enum:LIQUIDATED.NO}}" Margin="5" />
                            <RadioButton GroupName="liquidatedGroupName" Content="liquidateds" IsChecked="{Binding Liquidated, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=true, ValidatesOnExceptions=true, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static enum:LIQUIDATED.YES}}" Margin="5" />
                            <RadioButton GroupName="liquidatedGroupName" Content="Todos" IsChecked="{Binding Liquidated, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=true, ValidatesOnExceptions=true, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static enum:LIQUIDATED.ALL}}" Margin="5" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Grid.Row="1" >
                            <Label Content="Período:" Margin="5" />
                            <DatePicker SelectedDate="{Binding StartDate, StringFormat='{}{0:d}', ValidatesOnDataErrors=True, NotifyOnValidationError=True, UpdateSourceTrigger=PropertyChanged}" Width="100" Margin="5,5,5,10" />
                            <DatePicker SelectedDate="{Binding EndDate, StringFormat='{}{0:d}', ValidatesOnDataErrors=True, NotifyOnValidationError=True, UpdateSourceTrigger=PropertyChanged}" Width="100" Margin="5,5,5,10" />
                        </StackPanel>

                        <RibbonButton x:Name="btnFiltrar" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="2" Grid.RowSpan="2"
                                        Label="Filtrar" 
                                        LargeImageSource="\Images\analysis_5_32x32x32.png" 
                                        Command="{Binding FilterCommand}"
                                        IsEnabled="{Binding CanFilter}"/>
                    </Grid>
                </RibbonGroup>

            </RibbonTab>

            <RibbonTab Header="Accounts">

            </RibbonTab>

        </Ribbon>

        <DataGrid SelectionMode="Single" 
                  AutoGenerateColumns="False" 
                  EnableRowVirtualization="True" 
                  RowDetailsVisibilityMode="VisibleWhenSelected" 
                  ItemsSource="{Binding TransactionCollection, Mode=TwoWay}" Margin="10" Grid.Row="1" 
                  CanUserAddRows="{Binding CanAdd}" SelectedItem="{Binding TransactionSelectedItem}" IsSynchronizedWithCurrentItem="True" >
                  <!--SelectedItem="{Binding TransactionSelectedItem, Converter={StaticResource IgnoreNewItemPlaceHolderConverter}}" IsSynchronizedWithCurrentItem="True" >-->

            <!--CommandManager.PreviewExecuted ="TransactionDataGrid_PreviewExecuted">-->
            <!--RowEditEnding="TransactionDataGrid_RowEditEnding">-->
            <!--CellEditEnding="TransactionDataGrid_CellEditEnding"-->

            <DataGrid.Columns >

                <!--<DataGridTextColumn x:Name="idColumn" Binding="{Binding Id}" Header="Id" Width="SizeToHeader"/>-->
                <!--<DataGridTextColumn x:Name="AccountColumn" Binding="{Binding Account}" Header="Account" Width="SizeToHeader"/>-->

                <DataGridTemplateColumn x:Name="dataColumn" Header="Data" Width="120" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <DatePicker SelectedDate="{Binding Data, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=true, ValidatesOnExceptions=true}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!--<DataGridComboBoxColumn ItemsSource="{Binding SelectedItem.Accounts, ElementName=AgencyComboBox, NotifyOnSourceUpdated=True}"
                                        Header="Account"
                                        DisplayMemberPath="Number" 
                                        SelectedValuePath="Id" 
                                        SelectedItemBinding="{Binding SelectedItem, ElementName=AccountComboBox}" >-->
                    <!--<DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Account}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding ElementName=AgencyComboBox, Path=SelectedItem.Accounts}" SelectedItem="{Binding Account}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>-->
                <!--</DataGridComboBoxColumn>-->

                <DataGridTextColumn Binding="{Binding Descricao, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Header="Descricao" Width="*" CellStyle="{StaticResource SingleClick}" />
                <DataGridTextColumn Binding="{Binding Cheque, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Header="Cheque" Width="100" CellStyle="{StaticResource SingleClick}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Margin" Value="5,0,0,0" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridCheckBoxColumn Binding="{Binding Liquidated, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        Header="Liquidated" Width="SizeToHeader" CellStyle="{StaticResource SingleClick}" >

                    <!--<EventSetter Event="DataGrid.BeginningEdit" Handler="DataGrid_BeginEdit" />-->
                    <!--<EventSetter Event="CheckBox.Checked" Handler="onChecked"></EventSetter>-->
                </DataGridCheckBoxColumn>

                <DataGridTemplateColumn Header="Debit" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <RadioButton Grid.Column="1" HorizontalAlignment="Center" IsChecked="{Binding TransactionType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=true, ValidatesOnExceptions=true, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static enum:TRANSACTIONTYPE.Debit}}" Margin="3" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn Header="Credit" >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <RadioButton Grid.Column="1" HorizontalAlignment="Center" IsChecked="{Binding TransactionType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=true, ValidatesOnExceptions=true, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static enum:TRANSACTIONTYPE.Credit}}" Margin="3" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTextColumn Binding="{Binding Value, Mode=TwoWay, StringFormat='{}{0:C}', UpdateSourceTrigger=PropertyChanged, ConverterCulture={x:Static sysglb:CultureInfo.CurrentUICulture}}" Header="Valor" Width="100" CellStyle="{StaticResource SingleClick}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Foreground" Value="{Binding TransactionType, Converter={StaticResource TransactionTypeToColorConverter}}"/>
                            <Setter Property="FontWeight" Value="Bold" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Binding="{Binding Balance, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat='{}{0:C}', ConverterCulture={x:Static sysglb:CultureInfo.CurrentUICulture}}" Header="Balance" Width="100" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="Foreground" Value="{Binding Balance, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DecimalSignToColorConverter}}"/>
                            <Setter Property="FontWeight" Value="Bold" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

            </DataGrid.Columns>
        </DataGrid>

        <StackPanel Orientation="Horizontal" Grid.Row="2" VerticalAlignment="Center" Margin="10,0,10,10" >
            <!--<Label Content="Inicial Balance" FontWeight="Bold" />
            <Border BorderThickness="1" BorderBrush="Black">
                <TextBlock Width="100" Foreground="{Binding ElementName=AccountComboBox, Path=SelectedItem.Balance, Converter={StaticResource ValorToColorConverter}}" Text="{Binding ElementName=AccountComboBox, Path=SelectedItem.Balance, StringFormat='{}{0:C}', ConverterCulture={x:Static sysglb:CultureInfo.CurrentUICulture}}" />
            </Border>-->
            <Label Content="Balance Check" FontWeight="Bold" FontFamily="Verdana" FontStretch="Expanded" FontSize="14" />
            <Border BorderThickness="1" BorderBrush="Black" Width="150">
                <TextBlock HorizontalAlignment="Right" VerticalAlignment="Center" FontWeight="Bold" FontFamily="Verdana" FontStretch="Expanded" FontSize="14" Margin="2, 1, 2, 1" Foreground="{Binding ElementName=AccountComboBox, Path=SelectedItem.BalanceCheck, Converter={StaticResource DecimalSignToColorConverter}}" Text="{Binding ElementName=AccountComboBox, Path=SelectedItem.BalanceCheck, StringFormat='{}{0:C}', ConverterCulture={x:Static sysglb:CultureInfo.CurrentUICulture}}" />
            </Border>
        </StackPanel>

    </Grid>
</RibbonWindow>
