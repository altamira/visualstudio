//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ViewModel.ServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Invoice", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public partial class Invoice : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateField;
        
        private byte[] HashField;
        
        private int IdField;
        
        private string KeyField;
        
        private int NumberField;
        
        private string ReceiptField;
        
        private string SenderField;
        
        private ViewModel.ServiceReference.Status StatusField;
        
        private ViewModel.ServiceReference.Type TypeField;
        
        private decimal ValueField;
        
        private string XmlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Hash {
            get {
                return this.HashField;
            }
            set {
                if ((object.ReferenceEquals(this.HashField, value) != true)) {
                    this.HashField = value;
                    this.RaisePropertyChanged("Hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receipt {
            get {
                return this.ReceiptField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiptField, value) != true)) {
                    this.ReceiptField = value;
                    this.RaisePropertyChanged("Receipt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ViewModel.ServiceReference.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ViewModel.ServiceReference.Type Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Xml {
            get {
                return this.XmlField;
            }
            set {
                if ((object.ReferenceEquals(this.XmlField, value) != true)) {
                    this.XmlField = value;
                    this.RaisePropertyChanged("Xml");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum Status : short {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accepted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rejected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Divergent = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Received = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exception = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Type", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum Type : short {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NFe = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CTe = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NFSe = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AcceptRejectResult", Namespace="http://schemas.datacontract.org/2004/07/WCF.Service")]
    public partial class AcceptRejectResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string MessageField;
        
        private ViewModel.ServiceReference.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ViewModel.ServiceReference.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetInvoices", ReplyAction="http://tempuri.org/IService/GetInvoicesResponse")]
        System.IAsyncResult BeginGetInvoices(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ViewModel.ServiceReference.Invoice> EndGetInvoices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AcceptInvoice", ReplyAction="http://tempuri.org/IService/AcceptInvoiceResponse")]
        System.IAsyncResult BeginAcceptInvoice(int Id, System.AsyncCallback callback, object asyncState);
        
        ViewModel.ServiceReference.AcceptRejectResult EndAcceptInvoice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/RejectInvoice", ReplyAction="http://tempuri.org/IService/RejectInvoiceResponse")]
        System.IAsyncResult BeginRejectInvoice(int Id, System.AsyncCallback callback, object asyncState);
        
        ViewModel.ServiceReference.AcceptRejectResult EndRejectInvoice(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ViewModel.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInvoicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInvoicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ViewModel.ServiceReference.Invoice> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ViewModel.ServiceReference.Invoice>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AcceptInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AcceptInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ViewModel.ServiceReference.AcceptRejectResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ViewModel.ServiceReference.AcceptRejectResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RejectInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RejectInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ViewModel.ServiceReference.AcceptRejectResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ViewModel.ServiceReference.AcceptRejectResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ViewModel.ServiceReference.IService>, ViewModel.ServiceReference.IService {
        
        private BeginOperationDelegate onBeginGetInvoicesDelegate;
        
        private EndOperationDelegate onEndGetInvoicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetInvoicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAcceptInvoiceDelegate;
        
        private EndOperationDelegate onEndAcceptInvoiceDelegate;
        
        private System.Threading.SendOrPostCallback onAcceptInvoiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRejectInvoiceDelegate;
        
        private EndOperationDelegate onEndRejectInvoiceDelegate;
        
        private System.Threading.SendOrPostCallback onRejectInvoiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetInvoicesCompletedEventArgs> GetInvoicesCompleted;
        
        public event System.EventHandler<AcceptInvoiceCompletedEventArgs> AcceptInvoiceCompleted;
        
        public event System.EventHandler<RejectInvoiceCompletedEventArgs> RejectInvoiceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ViewModel.ServiceReference.IService.BeginGetInvoices(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInvoices(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<ViewModel.ServiceReference.Invoice> ViewModel.ServiceReference.IService.EndGetInvoices(System.IAsyncResult result) {
            return base.Channel.EndGetInvoices(result);
        }
        
        private System.IAsyncResult OnBeginGetInvoices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ViewModel.ServiceReference.IService)(this)).BeginGetInvoices(callback, asyncState);
        }
        
        private object[] OnEndGetInvoices(System.IAsyncResult result) {
            System.Collections.Generic.List<ViewModel.ServiceReference.Invoice> retVal = ((ViewModel.ServiceReference.IService)(this)).EndGetInvoices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInvoicesCompleted(object state) {
            if ((this.GetInvoicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInvoicesCompleted(this, new GetInvoicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInvoicesAsync() {
            this.GetInvoicesAsync(null);
        }
        
        public void GetInvoicesAsync(object userState) {
            if ((this.onBeginGetInvoicesDelegate == null)) {
                this.onBeginGetInvoicesDelegate = new BeginOperationDelegate(this.OnBeginGetInvoices);
            }
            if ((this.onEndGetInvoicesDelegate == null)) {
                this.onEndGetInvoicesDelegate = new EndOperationDelegate(this.OnEndGetInvoices);
            }
            if ((this.onGetInvoicesCompletedDelegate == null)) {
                this.onGetInvoicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInvoicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetInvoicesDelegate, null, this.onEndGetInvoicesDelegate, this.onGetInvoicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ViewModel.ServiceReference.IService.BeginAcceptInvoice(int Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAcceptInvoice(Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ViewModel.ServiceReference.AcceptRejectResult ViewModel.ServiceReference.IService.EndAcceptInvoice(System.IAsyncResult result) {
            return base.Channel.EndAcceptInvoice(result);
        }
        
        private System.IAsyncResult OnBeginAcceptInvoice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int Id = ((int)(inValues[0]));
            return ((ViewModel.ServiceReference.IService)(this)).BeginAcceptInvoice(Id, callback, asyncState);
        }
        
        private object[] OnEndAcceptInvoice(System.IAsyncResult result) {
            ViewModel.ServiceReference.AcceptRejectResult retVal = ((ViewModel.ServiceReference.IService)(this)).EndAcceptInvoice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAcceptInvoiceCompleted(object state) {
            if ((this.AcceptInvoiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AcceptInvoiceCompleted(this, new AcceptInvoiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AcceptInvoiceAsync(int Id) {
            this.AcceptInvoiceAsync(Id, null);
        }
        
        public void AcceptInvoiceAsync(int Id, object userState) {
            if ((this.onBeginAcceptInvoiceDelegate == null)) {
                this.onBeginAcceptInvoiceDelegate = new BeginOperationDelegate(this.OnBeginAcceptInvoice);
            }
            if ((this.onEndAcceptInvoiceDelegate == null)) {
                this.onEndAcceptInvoiceDelegate = new EndOperationDelegate(this.OnEndAcceptInvoice);
            }
            if ((this.onAcceptInvoiceCompletedDelegate == null)) {
                this.onAcceptInvoiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcceptInvoiceCompleted);
            }
            base.InvokeAsync(this.onBeginAcceptInvoiceDelegate, new object[] {
                        Id}, this.onEndAcceptInvoiceDelegate, this.onAcceptInvoiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ViewModel.ServiceReference.IService.BeginRejectInvoice(int Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRejectInvoice(Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ViewModel.ServiceReference.AcceptRejectResult ViewModel.ServiceReference.IService.EndRejectInvoice(System.IAsyncResult result) {
            return base.Channel.EndRejectInvoice(result);
        }
        
        private System.IAsyncResult OnBeginRejectInvoice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int Id = ((int)(inValues[0]));
            return ((ViewModel.ServiceReference.IService)(this)).BeginRejectInvoice(Id, callback, asyncState);
        }
        
        private object[] OnEndRejectInvoice(System.IAsyncResult result) {
            ViewModel.ServiceReference.AcceptRejectResult retVal = ((ViewModel.ServiceReference.IService)(this)).EndRejectInvoice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRejectInvoiceCompleted(object state) {
            if ((this.RejectInvoiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RejectInvoiceCompleted(this, new RejectInvoiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RejectInvoiceAsync(int Id) {
            this.RejectInvoiceAsync(Id, null);
        }
        
        public void RejectInvoiceAsync(int Id, object userState) {
            if ((this.onBeginRejectInvoiceDelegate == null)) {
                this.onBeginRejectInvoiceDelegate = new BeginOperationDelegate(this.OnBeginRejectInvoice);
            }
            if ((this.onEndRejectInvoiceDelegate == null)) {
                this.onEndRejectInvoiceDelegate = new EndOperationDelegate(this.OnEndRejectInvoice);
            }
            if ((this.onRejectInvoiceCompletedDelegate == null)) {
                this.onRejectInvoiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRejectInvoiceCompleted);
            }
            base.InvokeAsync(this.onBeginRejectInvoiceDelegate, new object[] {
                        Id}, this.onEndRejectInvoiceDelegate, this.onRejectInvoiceCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ViewModel.ServiceReference.IService CreateChannel() {
            return new ServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:50325/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private class ServiceClientChannel : ChannelBase<ViewModel.ServiceReference.IService>, ViewModel.ServiceReference.IService {
            
            public ServiceClientChannel(System.ServiceModel.ClientBase<ViewModel.ServiceReference.IService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetInvoices(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetInvoices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<ViewModel.ServiceReference.Invoice> EndGetInvoices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<ViewModel.ServiceReference.Invoice> _result = ((System.Collections.Generic.List<ViewModel.ServiceReference.Invoice>)(base.EndInvoke("GetInvoices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAcceptInvoice(int Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Id;
                System.IAsyncResult _result = base.BeginInvoke("AcceptInvoice", _args, callback, asyncState);
                return _result;
            }
            
            public ViewModel.ServiceReference.AcceptRejectResult EndAcceptInvoice(System.IAsyncResult result) {
                object[] _args = new object[0];
                ViewModel.ServiceReference.AcceptRejectResult _result = ((ViewModel.ServiceReference.AcceptRejectResult)(base.EndInvoke("AcceptInvoice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRejectInvoice(int Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Id;
                System.IAsyncResult _result = base.BeginInvoke("RejectInvoice", _args, callback, asyncState);
                return _result;
            }
            
            public ViewModel.ServiceReference.AcceptRejectResult EndRejectInvoice(System.IAsyncResult result) {
                object[] _args = new object[0];
                ViewModel.ServiceReference.AcceptRejectResult _result = ((ViewModel.ServiceReference.AcceptRejectResult)(base.EndInvoke("RejectInvoice", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService,
        }
    }
}
